#!/sbin/runscript
# TODO verbose

TAP_MAX=2
GROUP='kvm'

IF_WAN='enp4s0'
IP_WAN='$(ifconfig $WAN_IF |grep 'inet[^6]' |awk '{print $2}')'
NT_WAN='192.168.1.0/24'

IF_LAN='br0'
IP_LAN='$(ifconfig $LAN_IF |grep 'inet[^6]' |awk '{print $2}')'
NT_LAN='10.1.1.0/24'

depend() {
    need net
}

start() {
    # TODO: list from conf.d
}

stop() {
    start.__TODO__
}
restart() {
    start.__TODO__
}

checks() {
    # TODO
}


modules() {

    local signal="$1"
    eend [ -z "${signal}" ] "Use: $0 (start || stop)" && return 1  #<- ewarn

    local cmd_on= cmd_off= msg_=

    #retah esac
    if [ "${signal}" = 'start' ] then
        cmd_=''
        msg_='load'
    elif [ "${signal}" = 'stop' ] then
        cmd_='-r'
        msg_='unload'
    fi

    # ebegin "Loading the kvm module"
    /sbin/modprobe ${cmd_} kvm
    eend $? "Failed to ${msg_} the kvm module"

    # ebegin "Loading the kvm_intel module"
    /sbin/modprobe ${cmd_} kvm_intel
    eend $? "Failed to ${msg_} the kvm_intel module"

    # ebegin "Loading the tun module"
    /sbin/modprobe ${cmd_} tun
    eend $? "Failed to ${msg_} the tun module"
}

interfaces() {

    ebegin "Setting up the bridge device (br0)"
    /sbin/brctl addbr $${IF_LAN}
    /sbin/brctl setfd $${IF_LAN} 0
    /sbin/brctl sethello $${IF_LAN} 10
    /sbin/brctl stp $${IF_LAN} on
    /bin/ifconfig $${IF_LAN} $IP_LAN netmask 255.255.255.0 up
    eend $? "Failed to create the bridge interface"

    for ((i=0; i < TAP_MAX; i++)); do
        ebegin "Setting up the tap interface: tap$i"
        /usr/bin/tunctl -b -g $GROUP -t tap$i >/dev/null 2>&1
        eend $? "Failed to create the tap interface: tap$i"

        ebegin "Linking the bridge interface with tap$i"
        /sbin/brctl addif $${IF_LAN} tap$i
        eend $? "Failed to link the bridge interface to tap$i"

        ebegin "Bring tap$i interface up"
        /bin/ifconfig tap$i up 0.0.0.0 promisc
        eend $? "Failed to bring tap$i up"
    done
    
    # stop:
        for ((i=0; i < TAP_MAX; i++)); do
        ebegin "Bring tap$i interface down"
        /bin/ifconfig tap$i down
        eend $? "Failed to bring tap$i down"

        ebegin "Unlinking the bridge interface with tap$i"
        /sbin/brctl delif $${IF_LAN} tap$i
        eend $? "Failed to unlink the bridge interface to tap$i"

        ebegin "Removing the tap interface: tap$i"
        /usr/bin/tunctl -d tap$i >/dev/null 2>&1
        eend $? "Failed to remove the tap interface: tap$i"
    done

    ebegin "Stopping the bridge device (br0)"
    /bin/ifconfig $${IF_LAN} down
    /sbin/brctl delbr $${IF_LAN}
    eend $? "Failed to stop the bridge interface"
}

setup() {

    local signal="$1"
    eend [ -z "${signal}" ] "Use: $0 (start || stop)" && return 1  #<- ewarn

    local cmd_on= cmd_off= msg_=

    #retah esac
    if [ "${signal}" = 'start' ] then
        cmd_=(1 0)
        msg_=(on off)
    elif [ "${signal}" = 'stop' ] then
        cmd_=(0 1)
        msg_=(off on)
    fi

    # ebegin "Turning on ksm"
    /bin/echo "${cmd_[0]}" > /sys/kernel/mm/ksm/run
    eend $? "Failed to turn ${msg_[0]} kms"

    # ebegin "Turning on forwarding for ${IF_LAN} && ${IF_WAN}"
    /sbin/sysctl net.ipv4.conf.${IF_LAN}.forwarding=${cmd_[0]} >/dev/null 2>&1 && \
    /sbin/sysctl net.ipv4.conf.${IF_WAN}.forwarding=${cmd_[0]} >/dev/null 2>&1
    eend $? "Failed to turn ${msg_[0]} forwarding for ${IF_LAN} && ${IF_WAN}"

    # ebegin "Turning off firewall on bridge"
    /sbin/sysctl net.bridge.bridge-nf-call-arptables=${cmd_[1]} >/dev/null 2>&1 && \
    /sbin/sysctl net.bridge.bridge-nf-call-iptables=${cmd_[1]} >/dev/null 2>&1 && \
    /sbin/sysctl net.bridge.bridge-nf-call-ip6tables=${cmd_[1]} >/dev/null 2>&1
    eend $? "Failed to turn ${msg_[1]} firewall on bridge"

}

firewall() {

    local signal="$1"
    eend [ -z "${signal}" ] "Use: $0 (start || stop)" && return 1  #<- ewarn

    local cmd_A= cmd_I= msg_=

    #retah esac
    if [ "${signal}" = 'start' ] then
        cmd_A='-A'
        cmd_I='-I'
        msg_='allow'
    elif [ "${signal}" = 'stop' ] then
        cmd_A='-D'
        cmd_I='-D'
        msg_='disallow'
    fi

    iptables -t nat ${cmd_A} POSTROUTING -o ${IF_WAN} -s ${NT_WAN} -j MASQUERADE
    eend $? "Failed to ${msg_} masquerade (${IF_WAN})"
    iptables ${cmd_I} FORWARD -o ${IF_LAN} -i ${IF_WAN} -d ${NT_WAN} -j ACCEPT && \
    iptables ${cmd_I} FORWARD -i ${IF_LAN} -o ${IF_WAN} -s ${NT_WAN} -j ACCEPT
    eend $? "Failed to ${msg_} forward (${IF_LAN} <-> ${IF_WAN})"
}
